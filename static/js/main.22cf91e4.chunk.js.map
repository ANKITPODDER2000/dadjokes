{"version":3,"sources":["Joke.js","Jokegen.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","handleClick","bind","getColor","getEmoji","val","this","vote","joke","key","className","class_name","ind","onClick","style","borderColor","Component","API_URL","Jokegen","state","JSON","parse","window","localStorage","getItem","isLoaded","handleNewJoke","handleVote","length","i","axios","get","headers","Accept","res","push","data","uuidv4","setState","setItem","stringify","k","src","alt","map","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22cf91e4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Joke.css\"\r\n\r\nclass Joke extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.getColor = this.getColor.bind(this);\r\n        this.getEmoji = this.getEmoji.bind(this);\r\n    }\r\n    handleClick(val) {\r\n        this.props.vote(this.props.joke.key , val)\r\n    }\r\n    getColor() {\r\n        if (this.props.joke.vote >= 15)\r\n            return '#4caf50';\r\n        else if (this.props.joke.vote >= 12)\r\n            return '#8bc34a';\r\n        else if (this.props.joke.vote >= 9)\r\n            return '#cddc39';\r\n        else if (this.props.joke.vote >= 6)\r\n            return '#ffeb3b';\r\n        else if (this.props.joke.vote >= 3)\r\n            return '#ffc107';\r\n        else if (this.props.joke.vote >= 0)\r\n            return '#ff9800';\r\n        else\r\n            return '#f44336';\r\n    }\r\n    getEmoji() {\r\n        if (this.props.joke.vote >= 15)\r\n            return <i className=\"em em-rolling_on_the_floor_laughing\" ></i>;\r\n        else if (this.props.joke.vote >= 12)\r\n            return <i className=\"em em-laughing\" ></i>;\r\n        else if (this.props.joke.vote >= 9)\r\n            return <i className=\"em em-smiley\" ></i>;\r\n        else if (this.props.joke.vote >= 6)\r\n            return <i className=\"em em-slightly_smiling_face\" ></i>;\r\n        else if (this.props.joke.vote >= 3)\r\n            return <i className=\"em em-neutral_face\" ></i>;\r\n        else if (this.props.joke.vote >= 0)\r\n            return <i className=\"em em-confused\" ></i>;\r\n        else\r\n            return <i className=\"em em-angry\" ></i>;\r\n    }\r\n    render() {\r\n        let class_name;\r\n        if (this.props.ind % 2 === 0)\r\n            class_name = \"joke even\"\r\n        else\r\n            class_name = 'joke'\r\n        return (\r\n            <div className={class_name}>\r\n                <i onClick={() => this.handleClick(1)} className=\"fas fa-arrow-up\"></i>\r\n                <p className=\"vote\" style={{borderColor:this.getColor()}}>{this.props.joke.vote}</p>\r\n                <i onClick={() => this.handleClick(-1)} className=\"fas fa-arrow-down\"></i>\r\n                <p className=\"joke-cont\">{this.props.joke.joke}</p>\r\n                {this.getEmoji()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Joke from \"./Joke\";\r\nimport \"./Jokegen.css\";\r\n\r\nconst API_URL = 'https://icanhazdadjoke.com';\r\nclass Jokegen extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            joke: JSON.parse(window.localStorage.getItem('joke') || '[]'),\r\n            isLoaded : false\r\n        }\r\n        this.handleNewJoke = this.handleNewJoke.bind(this);\r\n        this.handleVote = this.handleVote.bind(this);\r\n    }\r\n    \r\n    async componentDidMount() { \r\n        if (this.state.joke.length === 0) {\r\n            let joke = [];\r\n            for (let i = 0; i < 10; i++){\r\n                let res = await axios.get(API_URL, {\r\n                    headers: {\r\n                        Accept : \"application/json\"\r\n                    }\r\n                })\r\n                joke.push({ joke: res.data.joke, vote: 0 , key : uuidv4()});\r\n            }\r\n            this.setState({ joke: joke , isLoaded : true} , () => window.localStorage.setItem(\"joke\" , JSON.stringify(joke)));\r\n        }\r\n        else {\r\n            this.setState({\r\n                isLoaded : true\r\n            })\r\n        }\r\n    }\r\n\r\n    async handleNewJoke() {\r\n        this.setState({\r\n            isLoaded : false\r\n        })\r\n        let res = await axios.get(API_URL, {\r\n            headers: {\r\n                Accept : \"application/json\"\r\n            }\r\n        })\r\n        this.setState({\r\n            joke: [...this.state.joke, {\r\n                joke: res.data.joke,\r\n                vote: 0,\r\n                key: uuidv4()\r\n            }],\r\n            isLoaded : true\r\n        } , () => window.localStorage.setItem(\"joke\" , JSON.stringify(this.state.joke)));\r\n        \r\n    }\r\n\r\n    handleVote(k, val) {\r\n        let joke = this.state.joke;\r\n        for (let i = 0; i < joke.length; i++){\r\n            if (joke[i].key === k)\r\n                joke[i].vote += val;\r\n        }\r\n        this.setState({\r\n            joke: joke,\r\n        } , () => window.localStorage.setItem(\"joke\" , JSON.stringify(joke)))\r\n    }\r\n    render() {\r\n        let block = null;\r\n        if (this.state.isLoaded)\r\n        {\r\n            block =\r\n                <div className=\"main-container\">\r\n                    <div className=\"left-container\">\r\n                        <h1>Dad <span>Jokes</span></h1>\r\n                        <img\r\n                            src=\"http://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\r\n                            alt=\"emoji\"\r\n                        />\r\n                        <button onClick={this.handleNewJoke}>NEW Jokes</button>\r\n                    </div>\r\n                    <div className=\"right-container\">\r\n                        {this.state.joke.map((joke, ind) => <Joke key={joke.key} ind={ind} joke={joke} vote={this.handleVote} />)}\r\n                    </div>\r\n                </div>\r\n        }\r\n        else\r\n        {\r\n            block = \r\n                <div className=\"loader\">\r\n                    <div className=\"loader-inner\">\r\n                        <div className=\"loader-line-wrap\">\r\n                            <div className=\"loader-line\"></div>\r\n                        </div>\r\n                        <div className=\"loader-line-wrap\">\r\n                            <div className=\"loader-line\"></div>\r\n                        </div>\r\n                        <div className=\"loader-line-wrap\">\r\n                            <div className=\"loader-line\"></div>\r\n                        </div>\r\n                        <div className=\"loader-line-wrap\">\r\n                            <div className=\"loader-line\"></div>\r\n                        </div>\r\n                        <div className=\"loader-line-wrap\">\r\n                            <div className=\"loader-line\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        }\r\n        return block;\r\n    }\r\n}\r\n\r\nexport default Jokegen;","import React, { Component } from 'react';\nimport Jokegen from \"./Jokegen\";\nimport './App.css';\n\nclass App extends Component{\n    render() {\n        return (\n            <div className=\"App\">\n                <Jokegen />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}